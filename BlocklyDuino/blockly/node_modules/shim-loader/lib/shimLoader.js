'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _loaderUtils = require('loader-utils');

var _transform = require('./transform');

var _transform2 = _interopRequireDefault(_transform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getShim(loaderContext) {
  var query = Object.assign({}, (0, _loaderUtils.getOptions)(loaderContext));
  var shim = query.shim || {};

  var moduleName = loaderContext._module.rawRequest;
  var resourcePath = loaderContext.resourcePath;

  if (typeof shim[moduleName] !== 'undefined') {
    // module name, e.g jquery.ui.position
    return [moduleName, shim[moduleName]];
  } else if (typeof shim[resourcePath] !== 'undefined') {
    // absolute path to module
    return [resourcePath, shim[resourcePath]];
  }
  return undefined;
}

// Ensure compatibility with CommonJS
module.exports = function shimLoader(code, sourcemap) {
  // cacheable loader
  this.cacheable();

  var shim = getShim(this);

  if (typeof shim !== 'undefined') {
    var _shim = _slicedToArray(shim, 2),
        requestedModule = _shim[0],
        shimConfig = _shim[1];

    var file = (0, _loaderUtils.getCurrentRequest)(this);
    var result = (0, _transform2.default)(requestedModule, code, sourcemap, file, shimConfig);

    this.callback(null, result.source, result.map);
    return;
  }

  if (sourcemap) {
    this.callback(null, code, sourcemap);
    return;
  }

  return code;
};